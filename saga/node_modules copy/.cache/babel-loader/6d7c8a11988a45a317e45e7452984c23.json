{"ast":null,"code":"import { put, spawn, call, takeLatest } from 'redux-saga/effects';\nimport { fetchServicesSuccess, fetchServiceSuccess, fetchServicesFailure, fetchServiceFailure } from '../actions/actionCreators';\nimport * as types from '../actions/actionTypes';\n\nfunction* handleServicesRequestSaga() {\n  try {\n    const items = yield call(fetchRequest, `${process.env.REACT_APP_ROOT_URL}/services`);\n    yield put(fetchServicesSuccess(items));\n  } catch (e) {\n    yield put(fetchServicesFailure(e.message));\n  }\n}\n\nfunction* watchServicesRequestSaga() {\n  yield takeLatest(types.FETCH_SERVICES_REQUEST, handleServicesRequestSaga);\n}\n\nfunction* handleServiceRequestSaga({\n  payload: {\n    serviceId\n  }\n}) {\n  try {\n    const item = yield call(fetchRequest, `${process.env.REACT_APP_ROOT_URL}/services/${serviceId}`);\n    yield put(fetchServiceSuccess(item));\n  } catch (e) {\n    yield put(fetchServiceFailure(e.message));\n  }\n}\n\nfunction* watchServiceRequestSaga() {\n  yield takeLatest(types.FETCH_SERVICE_REQUEST, handleServiceRequestSaga);\n}\n\nexport const fetchRequest = async (url, data) => {\n  const response = await fetch(url, {\n    cache: 'no-cache',\n    referrer: 'no-referrer',\n    method: data && 'POST' || 'GET',\n    headers: { ...(data && {\n        'Content-Type': 'application/json'\n      } || {})\n    },\n    body: data && JSON.stringify(data) || undefined\n  });\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n\n  return await response.json();\n};\nexport default function* saga() {\n  yield spawn(watchServicesRequestSaga);\n  yield spawn(watchServiceRequestSaga);\n}","map":{"version":3,"sources":["c:/homework_react/homework/src/sagas/index.js"],"names":["put","spawn","call","takeLatest","fetchServicesSuccess","fetchServiceSuccess","fetchServicesFailure","fetchServiceFailure","types","handleServicesRequestSaga","items","fetchRequest","process","env","REACT_APP_ROOT_URL","e","message","watchServicesRequestSaga","FETCH_SERVICES_REQUEST","handleServiceRequestSaga","payload","serviceId","item","watchServiceRequestSaga","FETCH_SERVICE_REQUEST","url","data","response","fetch","cache","referrer","method","headers","body","JSON","stringify","undefined","ok","Error","statusText","json","saga"],"mappings":"AAAA,SAAQA,GAAR,EAAYC,KAAZ,EAAmBC,IAAnB,EAAwBC,UAAxB,QAAwC,oBAAxC;AACA,SAAQC,oBAAR,EAA8BC,mBAA9B,EAAmDC,oBAAnD,EAAyEC,mBAAzE,QAAkG,2BAAlG;AACA,OAAO,KAAKC,KAAZ,MAAsB,wBAAtB;;AAIA,UAAUC,yBAAV,GAAqC;AACjC,MAAG;AACC,UAAMC,KAAK,GAAG,MAAMR,IAAI,CAACS,YAAD,EAAe,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,WAAhD,CAAxB;AACA,UAAMd,GAAG,CAACI,oBAAoB,CAACM,KAAD,CAArB,CAAT;AACH,GAHD,CAIA,OAAMK,CAAN,EAAQ;AACJ,UAAMf,GAAG,CAACM,oBAAoB,CAACS,CAAC,CAACC,OAAH,CAArB,CAAT;AACH;AAEJ;;AAED,UAAUC,wBAAV,GAAoC;AAChC,QAAMd,UAAU,CAACK,KAAK,CAACU,sBAAP,EAA+BT,yBAA/B,CAAhB;AACH;;AAED,UAAUU,wBAAV,CAAmC;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA;AAAD;AAAT,CAAnC,EAAyD;AACrD,MAAG;AACC,UAAMC,IAAI,GAAG,MAAMpB,IAAI,CAACS,YAAD,EAAe,GAAEC,OAAO,CAACC,GAAR,CAAYC,kBAAmB,aAAYO,SAAU,EAAtE,CAAvB;AACA,UAAMrB,GAAG,CAACK,mBAAmB,CAACiB,IAAD,CAApB,CAAT;AACH,GAHD,CAIA,OAAMP,CAAN,EAAQ;AACJ,UAAMf,GAAG,CAACO,mBAAmB,CAACQ,CAAC,CAACC,OAAH,CAApB,CAAT;AACH;AAEJ;;AAED,UAAUO,uBAAV,GAAmC;AAC/B,QAAMpB,UAAU,CAACK,KAAK,CAACgB,qBAAP,EAA8BL,wBAA9B,CAAhB;AACH;;AAED,OAAO,MAAMR,YAAY,GAAG,OAAMc,GAAN,EAAWC,IAAX,KAAoB;AAC5C,QAAMC,QAAQ,GAAE,MAAMC,KAAK,CACvBH,GADuB,EAEvB;AACII,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,QAAQ,EAAE,aAFd;AAGIC,IAAAA,MAAM,EAAGL,IAAI,IAAI,MAAT,IAAoB,KAHhC;AAIIM,IAAAA,OAAO,EAAE,EACL,IAAON,IAAD,IAAU;AAAC,wBAAgB;AAAjB,OAAX,IAAoD,EAAzD;AADK,KAJb;AAOIO,IAAAA,IAAI,EAAIP,IAAD,IAAUQ,IAAI,CAACC,SAAL,CAAgBT,IAAhB,CAAX,IAAqCU;AAP/C,GAFuB,CAA3B;;AAYA,MAAI,CAACT,QAAQ,CAACU,EAAd,EAAiB;AACb,UAAM,IAAIC,KAAJ,CAAUX,QAAQ,CAACY,UAAnB,CAAN;AACH;;AACD,SAAO,MAAMZ,QAAQ,CAACa,IAAT,EAAb;AACH,CAjBM;AAmBP,eAAe,UAAUC,IAAV,GAAgB;AAC3B,QAAMxC,KAAK,CAACgB,wBAAD,CAAX;AACA,QAAMhB,KAAK,CAACsB,uBAAD,CAAX;AACH","sourcesContent":["import {put,spawn, call,takeLatest} from'redux-saga/effects';\nimport {fetchServicesSuccess, fetchServiceSuccess, fetchServicesFailure, fetchServiceFailure} from'../actions/actionCreators';\nimport * as types from'../actions/actionTypes';\n\n\n\nfunction* handleServicesRequestSaga(){\n    try{\n        const items = yield call(fetchRequest,`${process.env.REACT_APP_ROOT_URL}/services`);\n        yield put(fetchServicesSuccess(items));\n    }\n    catch(e){\n        yield put(fetchServicesFailure(e.message));\n    }\n    \n}\n\nfunction* watchServicesRequestSaga(){\n    yield takeLatest(types.FETCH_SERVICES_REQUEST, handleServicesRequestSaga);\n}\n\nfunction* handleServiceRequestSaga({payload:{serviceId}}){\n    try{\n        const item = yield call(fetchRequest,`${process.env.REACT_APP_ROOT_URL}/services/${serviceId}`);\n        yield put(fetchServiceSuccess(item));\n    }\n    catch(e){\n        yield put(fetchServiceFailure(e.message));\n    }\n    \n}\n\nfunction* watchServiceRequestSaga(){\n    yield takeLatest(types.FETCH_SERVICE_REQUEST, handleServiceRequestSaga);\n}\n\nexport const fetchRequest = async(url, data) => {\n    const response= await fetch(\n        url,\n        {\n            cache: 'no-cache',\n            referrer: 'no-referrer',\n            method: (data && 'POST') || 'GET',\n            headers: {\n                ...( ((data) && {'Content-Type': 'application/json'}) || {})\n            },\n            body: ((data) && JSON.stringify (data)) || undefined\n        }\n    );\n    if (!response.ok){\n        throw new Error(response.statusText);\n    }\n    return await response.json();\n}\n\nexport default function* saga(){\n    yield spawn(watchServicesRequestSaga);\n    yield spawn(watchServiceRequestSaga);\n}\n\n"]},"metadata":{},"sourceType":"module"}